"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginAPI = void 0;
class LoginAPI {
    constructor(apiClient, auth) {
        this.apiClient = apiClient;
        this.auth = auth;
    }
    /**
     * Creates a trading session, obtaining session tokens for subsequent API access.
     *
     * @param username - Username
     * @param password - Password
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=534
     */
    createSession(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.auth.accessToken;
            const resource = LoginAPI.URL.SESSION;
            const response = yield this.apiClient.post(resource, {
                identifier: username,
                password,
            }, {
                headers: {
                    Version: '3',
                },
            });
            this.auth.accessToken = response.data.oauthToken.access_token;
            this.auth.accountId = response.data.accountId;
            this.auth.refreshToken = response.data.oauthToken.refresh_token;
            this.auth.lightstreamerEndpoint = response.data.lightstreamerEndpoint;
            yield this.getSessionToken();
            return response.data;
        });
    }
    /**
     * Saves the user's session details.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=534
     */
    getSessionToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = LoginAPI.URL.SESSION + '?fetchSessionTokens=true';
            const response = yield this.apiClient.get(resource);
            this.auth.securityToken = response.headers['x-security-token'];
            this.auth.clientSessionToken = response.headers.cst;
            return true;
        });
    }
    /**
     * Returns the user's session details.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=534
     */
    getSession() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = LoginAPI.URL.SESSION + '?fetchSessionTokens=true';
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    /**
     * Refreshes a trading session, obtaining new session tokens for subsequent API access.
     *
     * @see https://labs.ig.com/rest-trading-api-reference/service-detail?id=523
     */
    refreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.auth.accessToken;
            const resource = LoginAPI.URL.REFRESH_TOKEN;
            const response = yield this.apiClient.post(resource, {
                refresh_token: this.auth.refreshToken,
            });
            this.auth.accessToken = response.data.access_token;
            this.auth.refreshToken = response.data.refresh_token;
            return response.data;
        });
    }
}
exports.LoginAPI = LoginAPI;
LoginAPI.URL = {
    REFRESH_TOKEN: `/session/refresh-token`,
    SESSION: `/session`,
};
//# sourceMappingURL=LoginAPI.js.map