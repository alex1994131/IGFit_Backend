"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTClient = void 0;
const axios_1 = __importDefault(require("axios"));
const login_1 = require("../login");
const market_1 = require("../market");
const dealing_1 = require("../dealing");
const account_1 = require("../account");
class RESTClient {
    constructor(baseURL, apiKey) {
        this.apiKey = apiKey;
        this.auth = {};
        this.httpClient = axios_1.default.create({
            baseURL: baseURL,
            timeout: 5000,
        });
        this.httpClient.interceptors.request.use((config) => __awaiter(this, void 0, void 0, function* () {
            const updatedHeaders = Object.assign(Object.assign({}, config.headers), { 'X-IG-API-KEY': this.apiKey });
            const { accessToken, accountId } = this.auth;
            if (accessToken) {
                updatedHeaders.Authorization = 'Bearer ' + accessToken;
            }
            if (accountId) {
                updatedHeaders['IG-ACCOUNT-ID'] = accountId;
            }
            config.headers = updatedHeaders;
            return config;
        }));
        this.httpClient.interceptors.response.use(response => {
            return response;
        }, (error) => {
            if (error.response.status == 401 && error.response.data.errorCode == 'error.security.oauth-token-invalid') {
                const config = error.config;
                return this.login.refreshToken().then(_ => {
                    const { accessToken } = this.auth;
                    config.headers.Authorization = 'Bearer ' + accessToken;
                    return axios_1.default(config);
                });
            }
            return Promise.reject(error.config);
        });
        this.login = new login_1.LoginAPI(this.httpClient, this.auth);
        this.market = new market_1.MarketAPI(this.httpClient);
        this.dealing = new dealing_1.DealingAPI(this.httpClient);
        this.account = new account_1.AccountAPI(this.httpClient);
    }
    get defaults() {
        return this.httpClient.defaults;
    }
    get interceptors() {
        return this.httpClient.interceptors;
    }
}
exports.RESTClient = RESTClient;
//# sourceMappingURL=RESTClient.js.map